#!/usr/bin/bash
# What: 7z/zip using idrsa public key
# $Header: c:/cvs/repo/mosh/mbin/7zs.sh,v 1.81 2017-11-19 16:00:38 a Exp $
# GPL(C) moshahmed/at/gmail
# from: https://travis-ci.org/okigan/e7z
#   see https://wiki.openssl.org/index.php/Command_Line_Utilities

function die() { 1>&2 echo -e "$*" ; exit ;}
function warn() { 1>&2 echo -e "$*" ;}
function info() { if [[ -n "$verbose" ]]; then 1>&2 echo "$*" ;fi ;}
function need_file(){ test -f "$1" || die "need_file $*" ;}
function need_dir(){ test -d "$1" || die "need_dir $*" ;}
function need_val(){ test -n "$1" || die "need $2" ;}

CMD=${0##*\\} 
CMD=${CMD%.*}

function usage() {
  keyfile=\$HOME/.ssh/id_rsa
  pemfile=$keyfile.pem.pub
1>&2 echo "
What: $CMD [Options] [Actions] [archive] [args] .. 7z/zip encrypt args into archive with openssl id_rsa
Actions:
  a archive paths  .. pack    paths into archive
    How: otp (one time password, random bytes) is encrypted with public key (pemfile) 
      as otpfile and saved in archive. Other files in archive are encrypted with otp.
  x archive        .. extract files from archive (*.zip or *.7z)
    How: otpfile is extracted from archive and decrypted to extract otp, with your keyfile,
    Rest of the files in archive are extracted using the otp.
Options:
  -keyfile=~/.ssh/.id_rsa  .. example
  -pemfile=~/.ssh/keyfile.pem.pub .. example
    Generated by: ssh-keygen -f keyfile -e -m PKCS8 > pemfile
  -otp=read      .. ask user for otp
  -otp=pass      .. use this pass as otp (default is 32 random bytes = 256 bits)
  -oldfile=oldfile .. extract otp from oldfile otpfile and saves same otp in a new otpfile.
  -v=1           .. verbose
Setup
  keyfile=$keyfile
  pemfile=$pemfile
  ssh-keygen -f \$keyfile -e -m PKCS8 > \$pemfile
Example
  $CMD a archive.zip -r dir *.txt # pack, no passphrase needed.
  $CMD x archive.zip          # unpack, needs private keyfile passphrase
Test:
  rm -fv x.7z date*.txt
  date > date.txt
  $CMD a x.7z  date.txt
  $CMD a x.zip date.txt
  $CMD x x.7z -aou
  diff date*.txt
"
  echo "$*"
  exit
}

keyfile=$HOME/.ssh/id_rsa
pemfile=$HOME/.ssh/id_rsa.pem.pub
otpfile=$TMP/otp.ssl # base64 encrypted otp with keyfile
otpfile_base=$(basename $otpfile)
archive=
verbose=
action=
args=

# Options
while [ $# -gt 0 ]  ;do
  case $1 in
    -keyfile=*) keyfile=${1#-keyfile=} ; need_file $keyfile keyfile ;;
    -pemfile=*) pemfile=${1#-permfile=} ; need_file $pemfile pemfile ;;
    -otp=read) read -s -p "otp:" otp ;;
    -otp=*) otp=${1#-otp=} ;;
    -oldfile=*) oldfile=${1#-oldfile=} ; need_file $oldfile oldfile
      otp=$(base64 -d $oldfile | openssl pkeyutl -decrypt -inkey $keyfile ) 
      need_val "$otp" otp
      ;;
    -v) verbose=1 ;;
    -v=*) verbose=${1#-*=} ;;
    # break after actions, remaining args to archiver
    a) action=$1 ; archive=${2:?"Need archive"} ; shift 2; args=$* ; break ;;
    x) action=$1 ; archive=${2:?"Need archive"} ; shift 2; args=$* ; break ;;
    *) usage "Unknown option:'$*'" ;;
  esac
  shift
done

if [[ -z "$action" ]] ;then
  usage
fi

case $archive in
  *.7z | *.zip )  ;;
  *) die "Unsupported archive $archive" ;;
esac

info "=== action=$action, archive=$archive, keyfile=$keyfile, args=$args"

case $action in
  a) # Generate otp (one time password)
    if [[ -z "$otp" ]] ;then
      otp=$(openssl rand -hex 32|dos2unix)
      info "# Generated otp=$otp"
    fi
    need_file $pemfile "\nDo: ssh-keygen -f $keyfile -e -m PKCS8 > $pemfile"
    echo $otp |
      openssl pkeyutl -encrypt -pubin -inkey $pemfile | base64 > $otpfile
    need_file $otpfile
    info "# Encryped opt with $pemfile to otpfile=$otpfile"
    # Save encrypted otp = otpfile = ssl_enc(keyfile,otp) in the archive
    info "# Encrypting $archive with otp in otpfile=$otpfile, otp=$otp"
    case $archive in
      *.7z) cat $otpfile |
        7z a            $archive -si$otpfile_base
        7z u  -p$otp    $archive    $args
        7z l $archive
        ;;
      *.zip)
        zip -j           $archive $otpfile
        zip -u -P "$otp" $archive $args
        unzip -lv $archive
        ;;
    esac
    need_file $archive
    warn "Wrote $archive"
    ;;
  x) need_file $archive
    if [[ -z "$otp" ]] ;then
      # Extract otp from archive using keyfile
      otp=$(7z x -so $archive $otpfile_base | base64 -d | openssl pkeyutl -decrypt -inkey $keyfile )
    fi
    need_val "$otp" otp
    info "# Decrypting $archive with otp=$otp"
    7z x $archive -p$otp $args -x!$otpfile_base
    ;;
  *) usage "Nothing to do '$action'?" ;;
esac
